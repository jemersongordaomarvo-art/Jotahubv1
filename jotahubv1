--// Serviços
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local TweenService = game:GetService("TweenService")
local player = Players.LocalPlayer

--// Configurações
local CONFIG = {
    reach = 10,
    showReach = false,
    reachVisible = true,
    reachColor = Color3.fromRGB(0,162,255),
    selectedParts = {},

    esp = false,
    espType = "Highlight", -- Highlight ou Box
    espColor = Color3.fromRGB(255,0,0)
}

local reachSpheres = {}
local espObjects = {}

local bodyPartsList = {
    "Head", "Torso", "HumanoidRootPart",
    "Left Arm", "Right Arm",
    "Left Leg", "Right Leg",
    "UpperTorso", "LowerTorso",
    "LeftUpperArm", "LeftLowerArm", "LeftHand",
    "RightUpperArm", "RightLowerArm", "RightHand",
    "LeftUpperLeg", "LeftLowerLeg", "LeftFoot",
    "RightUpperLeg", "RightLowerLeg", "RightFoot"
}

--// Funções Reach
local function getCharacterPart(partName)
    local char = player.Character
    if char then return char:FindFirstChild(partName) end
end

local function getBalls()
    local balls = {}
    for _, obj in ipairs(Workspace:GetDescendants()) do
        if obj:IsA("BasePart") and obj.CanTouch and obj.Size.Magnitude > 1 and obj.Name:lower():find("ball") then
            table.insert(balls, obj)
        end
    end
    return balls
end

local function createReachSpheres()
    for _, partName in ipairs(CONFIG.selectedParts) do
        local part = getCharacterPart(partName)
        if part and not reachSpheres[part] then
            local sphere = Instance.new("Part")
            sphere.Shape = Enum.PartType.Ball
            sphere.Anchored = true
            sphere.CanCollide = false
            sphere.Material = Enum.Material.ForceField
            sphere.Size = Vector3.new(CONFIG.reach*2, CONFIG.reach*2, CONFIG.reach*2)
            sphere.Transparency = CONFIG.reachVisible and 0.6 or 1
            sphere.Color = CONFIG.reachColor
            sphere.Name = partName.."_ReachSphere"
            sphere.Parent = Workspace
            reachSpheres[part] = sphere
        end
    end
end

local function updateReachSpheres()
    for part, sphere in pairs(reachSpheres) do
        if part and part.Parent then
            sphere.CFrame = part.CFrame
            sphere.Size = Vector3.new(CONFIG.reach*2, CONFIG.reach*2, CONFIG.reach*2)
            sphere.Color = CONFIG.reachColor
            sphere.Transparency = CONFIG.reachVisible and 0.6 or 1
        else
            if sphere then sphere:Destroy() end
            reachSpheres[part] = nil
        end
    end
end

local function touchBalls()
    if not CONFIG.showReach then return end
    local balls = getBalls()
    for _, partName in ipairs(CONFIG.selectedParts) do
        local part = getCharacterPart(partName)
        if part then
            for _, ball in ipairs(balls) do
                if (ball.Position - part.Position).Magnitude <= CONFIG.reach then
                    pcall(function()
                        firetouchinterest(ball, part, 0)
                        firetouchinterest(ball, part, 1)
                    end)
                end
            end
        end
    end
end

--// Funções ESP
local function createESPObject(obj)
    if CONFIG.espType == "Highlight" then
        local hb = Instance.new("Highlight")
        hb.Name = "JotaESP"
        hb.Adornee = obj
        hb.FillColor = CONFIG.espColor
        hb.FillTransparency = 0.7
        hb.OutlineColor = CONFIG.espColor
        hb.OutlineTransparency = 0
        hb.Parent = obj
        return hb
    elseif CONFIG.espType == "Box" then
        local hb = Instance.new("BoxHandleAdornment")
        hb.Adornee = obj
        hb.Size = obj.Size
        hb.Color3 = CONFIG.espColor
        hb.AlwaysOnTop = true
        hb.ZIndex = 10
        hb.Parent = obj
        return hb
    end
end

local function updateESP()
    -- Limpa inválidos
    for obj, hb in pairs(espObjects) do
        if not obj or not obj.Parent then
            if hb then hb:Destroy() end
            espObjects[obj] = nil
        end
    end

    if CONFIG.esp then
        local balls = getBalls()
        for _, ball in ipairs(balls) do
            if not espObjects[ball] then
                espObjects[ball] = createESPObject(ball)
            else
                local hb = espObjects[ball]
                if CONFIG.espType == "Highlight" then
                    hb.FillColor = CONFIG.espColor
                    hb.OutlineColor = CONFIG.espColor
                elseif CONFIG.espType == "Box" then
                    hb.Color3 = CONFIG.espColor
                end
            end
        end
    else
        for _, hb in pairs(espObjects) do
            if hb and hb.Parent then hb:Destroy() end
        end
        espObjects = {}
    end
end

--// Rayfield Interface
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
    Name = "JOTA HUB",
    LoadingTitle = "JOTA HUB",
    Theme = "Default",
    ConfigurationSaving = { Enabled = true, FileName = "JOTA Hub Config" }
})

--// TAB REACH
local ReachTab = Window:CreateTab("Reach")
ReachTab:CreateLabel("JOTA HUB V1 ⚡")

ReachTab:CreateToggle({
    Name = "Ativar Reach",
    CurrentValue = CONFIG.showReach,
    Callback = function(state)
        CONFIG.showReach = state
        if not state then
            for _, sphere in pairs(reachSpheres) do
                if sphere and sphere.Parent then sphere:Destroy() end
            end
            reachSpheres = {}
        end
    end
})

ReachTab:CreateSlider({
    Name = "Tamanho do Reach",
    Range = {1,50},
    Increment = 1,
    CurrentValue = CONFIG.reach,
    Suffix = "studs",
    Callback = function(value)
        CONFIG.reach = value
    end
})

ReachTab:CreateToggle({
    Name = "Esferas Invisíveis",
    CurrentValue = not CONFIG.reachVisible,
    Callback = function(state)
        CONFIG.reachVisible = not state
    end
})

ReachTab:CreateDropdown({
    Name = "Partes com Reach",
    Options = bodyPartsList,
    CurrentOption = {},
    MultipleOptions = true,
    Callback = function(selected)
        CONFIG.selectedParts = selected
    end
})

ReachTab:CreateColorPicker({
    Name = "Cor do Reach",
    Color = CONFIG.reachColor,
    Callback = function(color)
        CONFIG.reachColor = color
    end
})

--// TAB ESP
local EspTab = Window:CreateTab("ESP")
EspTab:CreateToggle({
    Name = "Ativar ESP",
    CurrentValue = CONFIG.esp,
    Callback = function(state)
        CONFIG.esp = state
    end
})

EspTab:CreateDropdown({
    Name = "Tipo de ESP",
    Options = {"Highlight","Box"},
    CurrentOption = "Highlight",
    MultipleOptions = false,
    Callback = function(option)
        CONFIG.espType = option
        -- Remove antigas para recriar
        for _, hb in pairs(espObjects) do
            if hb and hb.Parent then hb:Destroy() end
        end
        espObjects = {}
    end
})

EspTab:CreateColorPicker({
    Name = "Cor do ESP",
    Color = CONFIG.espColor,
    Callback = function(color)
        CONFIG.espColor = color
    end
})

--// Atualização contínua
RunService.RenderStepped:Connect(function()
    createReachSpheres()
    updateReachSpheres()
    touchBalls()
    updateESP()
end)
